<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵兴磊Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://schoderzhao.github.io/"/>
  <updated>2020-06-16T09:39:55.491Z</updated>
  <id>https://schoderzhao.github.io/</id>
  
  <author>
    <name>Schoder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git使用</title>
    <link href="https://schoderzhao.github.io/2020/06/16/git%E4%BD%BF%E7%94%A8/"/>
    <id>https://schoderzhao.github.io/2020/06/16/git%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-16T08:55:30.409Z</published>
    <updated>2020-06-16T09:39:55.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git 基本操作"></a>git 基本操作</h1><p>1、创建一个项目</p><p>2、打开项目   在项目目录下右键单击–打开 git bash</p><p>3、初始化项目仓库   创建项目仓库</p><p>命令 ： git init</p><p>git config –global user.name &lt;名字&gt; ———&gt;:配置用户名</p><p>git config –global user.email &lt;邮箱&gt;———&gt;：配置邮箱</p><p>git config –list ———&gt;：查看配置信息</p><p>git config –global user.name  ———&gt;：查看用户名</p><p>git config –global user.email ——–&gt; :查看邮箱</p><p>git status  查看文件是否被git管理</p><p>4、添加文件   </p><p>  git add 文件名   一次只能添加一个文件</p><p>  全部添加 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add ./--all/-A/*</span><br></pre></td></tr></table></figure><p>5、提交</p><p>   git commit -m”日志描述”</p><p>6、项目文件内容如果有变动  先 git add . 再 git commit -m”日志”</p><p>7、git log 查看项目日志</p><p>8、回退操作  </p><p>  git reset –hard 前六位编码</p><p>9、恢复手动删除的文件  git checkout 提交生成码 文件名</p><h1 id="分支操作-："><a href="#分支操作-：" class="headerlink" title="分支操作 ："></a>分支操作 ：</h1><p>1、查看分支  git branch</p><p>2、创建分支  git branch 分支名</p><p>3、切换分支  git checkout 分支名</p><p>4、删除分支  git branch -d 分支名</p><p>5、合并分支  git merge  分支名</p><p>多人协作开发(接下来用张三、李四、CTO三人来演示工作中的流程)：</p><p>1、张三克隆文件：git clone &lt;地址&gt; 文件夹名称</p><p>2、李四克隆文件：git clone &lt;地址&gt; 文件夹名称</p><p>3、张三在开发过程中需要解决BUG</p><p>4、李四在开发过程中需要开发新的功能</p><h1 id="张三解决BUG并提交文件："><a href="#张三解决BUG并提交文件：" class="headerlink" title="张三解决BUG并提交文件："></a>张三解决BUG并提交文件：</h1><p>1、创建子分支：git branch zhangsan</p><p>2、切换子分支：git checkout zhangsan</p><p>3、提交到暂存区：git add index.html</p><p>4、提交到版本库：git commit -m “张三提交”</p><p>5、关联远程分支：git push –set-upstream origin zhangsan (这一步只需第一次的时候这样做即可，第二次修改文件的时候就可以直接执行第6步)</p><p>6、提交文件：git push</p><h1 id="CTO合并文件："><a href="#CTO合并文件：" class="headerlink" title="CTO合并文件："></a>CTO合并文件：</h1><p>1、更新本地的分支：git fetch –all</p><p>2、切换子分支：git checkout zhangsan</p><p>3、切换主分支：git checkout master</p><p>4、合并文件：git merge zhangsan   (：wq 按下回车)</p><p>5、提交到远端：git push</p><p>6、删除子分支：git checkout -d zhangsan  (不需要操作 )</p><h1 id="李四开发新的功能，但是李四的文件还是以前有bug的文件，因此我们需要最新的代码："><a href="#李四开发新的功能，但是李四的文件还是以前有bug的文件，因此我们需要最新的代码：" class="headerlink" title="李四开发新的功能，但是李四的文件还是以前有bug的文件，因此我们需要最新的代码："></a>李四开发新的功能，但是李四的文件还是以前有bug的文件，因此我们需要最新的代码：</h1><p>1、创建并切换子分支：git checkout -b lisi</p><p>fle</p><p>2、将开发好的新功能提交到版本库：git add index.html    git commit -m “李四提交”</p><p>3、切换主分支：git checkout master</p><p>4、将远端最新的代码拉取下来：git pull</p><p>5、切换子分支：git checkout lisi</p><p>6、合并主分支文件：git merge master</p><p>7、退出文件：esc 输入wq</p><p>8、提交到远端：git push –set-upstream origin lisi</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-基本操作&quot;&gt;&lt;a href=&quot;#git-基本操作&quot; class=&quot;headerlink&quot; title=&quot;git 基本操作&quot;&gt;&lt;/a&gt;git 基本操作&lt;/h1&gt;&lt;p&gt;1、创建一个项目&lt;/p&gt;
&lt;p&gt;2、打开项目   在项目目录下右键单击–打开 git bas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Maven中scope标签作用</title>
    <link href="https://schoderzhao.github.io/2020/06/16/Maven%E4%B8%ADscope%E6%A0%87%E7%AD%BE%E4%BD%9C%E7%94%A8/"/>
    <id>https://schoderzhao.github.io/2020/06/16/Maven%E4%B8%ADscope%E6%A0%87%E7%AD%BE%E4%BD%9C%E7%94%A8/</id>
    <published>2020-06-16T08:41:12.055Z</published>
    <updated>2020-06-16T08:49:02.048Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Maven中scope标签作用"><a href="#Maven中scope标签作用" class="headerlink" title="Maven中scope标签作用"></a>Maven中scope标签作用</h1><p>scope 是用来限制 dependency 的作用范围的，影响 maven 项目在各个生命周期时导入的 package 的状态，主要管理依赖的部署。</p><h2 id="scope-的作用范围："><a href="#scope-的作用范围：" class="headerlink" title="scope 的作用范围："></a>scope 的作用范围：</h2><p>（1）compile：默认值，适用于所有阶段（表明该 jar 包在编译、运行以及测试中路径均可见），并且会随着项目一起发布。</p><p>（2）test：只在测试时使用，用于编译和运行测试代码，不会随项目发布。</p><p>（3）runtime：无需参与项目的编译，不过后期的测试和运行周期需要其参与，与 compile 相比，跳过了编译。如 JDBC 驱动，适用运行和测试阶段。</p><p>（4）provided：编译和测试时有效，但是该依赖在运行时由服务器提供，并且打包时也不会被包含进去。如 servlet-api。</p><p>（5）system：类似 provided，需要显式提供包含依赖的jar，不会从 maven 仓库下载，而是从本地文件系统获取，需要添加 systemPath 的属性来定义路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;Maven中scope标签作用&quot;&gt;&lt;a href=&quot;#Maven中scope标签作用&quot; class=&quot;headerlink&quot; title=&quot;Maven中scope标签作用&quot;&gt;&lt;/a&gt;Maven中scope标签作用&lt;/h1&gt;&lt;p&gt;scope 是用来限制 d
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java</title>
    <link href="https://schoderzhao.github.io/2020/06/15/java/"/>
    <id>https://schoderzhao.github.io/2020/06/15/java/</id>
    <published>2020-06-15T08:34:57.000Z</published>
    <updated>2020-06-15T08:34:57.440Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
