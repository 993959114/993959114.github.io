[{"title":"FastDfs详解","date":"2020-07-14T03:06:07.064Z","path":"2020/07/14/FastDfs详解/","text":"FastDfs介绍分布式文件系统静态资源服务器 图片服务器(在分布式环境中，部署多个同样的系统可以共享。多个不一样的系统也可以共 享资源)。 介绍什么是FastDFS FastDFS是用c语言编写的一款开源的分布式文件系统。FastDFS为互 联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并 注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文 件服务器集群提供文件上传、下载等服务。 FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存 储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问 题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。 https://baike.baidu.com/item/fastdfs 和之前对比，把上传的位置做了变化。这次把图片上传到远程的图片服务器。分布式共享。 流程 文件上传时序图：(按照时间的请求顺序) 在存储服务器上存储了具体的内容，返回给客户端的只是存储的地址， 以后就拿这个远程的地址就可以访问到文件了。 下载文件时序图 下载案例：http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.13/bin/apachetomcat-9.0.13.zip有地址，部署在web服务器，就支持直接下载。开源地址：https://github.com/happyfish100 FastDfs安装 FastDfs安装安装一台虚拟机来模拟，一个Tracker、一个Storage服务。配和nginx访问图片。 (因为需要对外访问，最后可以通过域名访问到图片。)https://www.baidu.com/img/bd_logo1.png 下载:https://github.com/happyfish100 初始环境所需软件: 链接 https://pan.baidu.com/s/1DcUH0TngCiR2LAsLxHWZIg 提取码 mfdp 软件上传： 在线安装libevent工具包：确认是否安装： 1rpm -qa | grep libevent （已安装不需要装,没有安装需要装） 1yum -y install libevent 安装libfastcommon工具包解压缩: 1unzip libfastcommon-master.zip 若unzip命令没找到: 123yum install -y unzip zip.&#x2F;make.sh.&#x2F;make.sh install 若32位目录中没有libfastcommon.so文件，就把/usr/lib64/libfastcommon.so文件向/usr/lib/下复制一份（新版红色框部分标示32位、64位目录都已安装。） 解压： 编译与安装： 观察：可以兼容32,64位系统 Tracker服务安装安装Tracker服务,这只是一个监听服务。1)解压缩: 1unzip fastdfs-master.zip 2) 1.&#x2F;make.sh 3) 1.&#x2F;make.sh install :安装后在/usr/bin/目录下有以fdfs开头的文件都是编译出来的。配置文件都放到/etc/fdfs文件夹4)把/opt/qf/fastdfs/fastdfs-master/conf目录下的所有的配置文件都复制到/etc/fdfs下(从源码的配置文件/opt/qf/fastdfs-soft/fastdfsmaster/conf/*中复制)。 1cp &#x2F;opt&#x2F;qf&#x2F;fastdfs&#x2F;fastdfs-master&#x2F;conf&#x2F;* &#x2F;etc&#x2F;fdfs&#x2F; 5)配置tracker服务。修改/ etc/fdfs /tracker.conf文件。base_path=/home/shuju/fastdfs[手动创建目录]http.server_port=856)启动tracker。 1&#x2F;usr&#x2F;bin&#x2F;fdfs_trackerd &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf 重启使用命令： 1&#x2F;usr&#x2F;bin&#x2F;fdfs_trackerd &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf 1restart Storage服务安装安装storage服务,这个就是真正的存储服务。如果是在不同的服务器安装，第三步的1~4需要重新执行。这里我们在同样一台服务器，不再需要对源码进行重复的编译和安装,仅仅只需要配置storage服务。修改/ etc/fdfs /storage.conf文件 Storage存储和日志存放路径:base_path=/home/shuju/fastdfs图片保持路径: store_path0=/home/shuju/fastdfs指定Tracker服务器: tracker_server=101.21.26.229:22122(阿里云使用外网IP,正常公司内部的正式服务器也只有内网IP)http.server_port=85 # 此处需要和后面 nginx 监听端口保持一致启动storage服务启动： 1&#x2F;usr&#x2F;bin&#x2F;fdfs_storaged &#x2F;etc&#x2F;fdfs&#x2F;storage.conf 日志/home/shuju/fdfs/logs/storaged.log 外网若链接不成功改内网IP重启: 1&#x2F;usr&#x2F;bin&#x2F;fdfs_storaged &#x2F;etc&#x2F;fdfs&#x2F;storage.conf 1restart 链接成功,测试服务测试需要使用客户端的配置文件，所以需要修改配置文件/etc/fdfs/client.conf 客户端日志保持base_path=/home/shuju/fastdfs指定Tracker服务器: tracker_server= 101.21.26.229:22122(外网IP)http.tracker_server_port=85 (配置nginx) 测试指令一：指令的位置:/usr/bin上传图片： 1.&#x2F;fdfs_upload_file &#x2F;etc&#x2F;fdfs&#x2F;client.conf &#x2F;etc&#x2F;fdfs&#x2F;anti-steal.jpg 存储地址：group1/M00/00/00/rBGMA1q4VqqATqNmAABdrZgsqUU938.jpg 真实地址：服务器存储地址:/home/shuju/fastdfs/data/00/00 测试指令二：上传图片： 1.&#x2F;fdfs_test &#x2F;etc&#x2F;fdfs&#x2F;client.conf upload &#x2F;etc&#x2F;fdfs&#x2F;anti-steal.jpg 显示有完整url ：http://192.168.132.134:85/group1/M00/00/00/wKiEhlvUNWWAAjA5AAFl0YAhvnQ243.jpg这个路径是后来可以通过域名的方式直接访问 注意：防火墙放行：22122 23000 两个端口 通过java程序实现上传下载具体代码: https://github.com/SchoderZhao/fastdfsDemo","tags":[]},{"title":"Spring事务传播行为种类","date":"2020-06-17T02:33:11.398Z","path":"2020/06/17/Spring事务传播行为种类/","text":"title: Spring事务传播行为种类date: 2020-06-17 10:33:11 tags:SprigSpring在TransactionDefinition接口中规定了7种类型的事务传播行为，它们规定了事务方法和事务方法发生嵌套调用时事务如何进行传播： 事务传播行为类型 说明 PROPAGATION_REQUIRED 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。 PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。 PROPAGATION_MANDATORY 使用当前的事务，如果当前没有事务，就抛出异常。 PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。 PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。 PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。 当使用PROPAGATION_NESTED时，底层的数据源必须基于JDBC 3.0，并且实现者需要支持保存点事务机制。 @Transactional(propagation=Propagation.REQUIRED) 事务传播行为种类（注解方式）","tags":[]},{"title":"git使用","date":"2020-06-16T08:55:30.409Z","path":"2020/06/16/git使用/","text":"git 基本操作1、创建一个项目 2、打开项目 在项目目录下右键单击–打开 git bash 3、初始化项目仓库 创建项目仓库 命令 ： git init git config –global user.name &lt;名字&gt; ———&gt;:配置用户名 git config –global user.email &lt;邮箱&gt;———&gt;：配置邮箱 git config –list ———&gt;：查看配置信息 git config –global user.name ———&gt;：查看用户名 git config –global user.email ——–&gt; :查看邮箱 git status 查看文件是否被git管理 4、添加文件 git add 文件名 一次只能添加一个文件 全部添加 ： 1git add ./--all/-A/* 5、提交 git commit -m”日志描述” 6、项目文件内容如果有变动 先 git add . 再 git commit -m”日志” 7、git log 查看项目日志 8、回退操作 git reset –hard 前六位编码 9、恢复手动删除的文件 git checkout 提交生成码 文件名 分支操作 ：1、查看分支 git branch 2、创建分支 git branch 分支名 3、切换分支 git checkout 分支名 4、删除分支 git branch -d 分支名 5、合并分支 git merge 分支名 多人协作开发(接下来用张三、李四、CTO三人来演示工作中的流程)： 1、张三克隆文件：git clone &lt;地址&gt; 文件夹名称 2、李四克隆文件：git clone &lt;地址&gt; 文件夹名称 3、张三在开发过程中需要解决BUG 4、李四在开发过程中需要开发新的功能 张三解决BUG并提交文件：1、创建子分支：git branch zhangsan 2、切换子分支：git checkout zhangsan 3、提交到暂存区：git add index.html 4、提交到版本库：git commit -m “张三提交” 5、关联远程分支：git push –set-upstream origin zhangsan (这一步只需第一次的时候这样做即可，第二次修改文件的时候就可以直接执行第6步) 6、提交文件：git push CTO合并文件：1、更新本地的分支：git fetch –all 2、切换子分支：git checkout zhangsan 3、切换主分支：git checkout master 4、合并文件：git merge zhangsan (：wq 按下回车) 5、提交到远端：git push 6、删除子分支：git checkout -d zhangsan (不需要操作 ) 李四开发新的功能，但是李四的文件还是以前有bug的文件，因此我们需要最新的代码：1、创建并切换子分支：git checkout -b lisi fle 2、将开发好的新功能提交到版本库：git add index.html git commit -m “李四提交” 3、切换主分支：git checkout master 4、将远端最新的代码拉取下来：git pull 5、切换子分支：git checkout lisi 6、合并主分支文件：git merge master 7、退出文件：esc 输入wq 8、提交到远端：git push –set-upstream origin lisi","tags":[]},{"title":"Maven中scope标签作用","date":"2020-06-16T08:41:12.055Z","path":"2020/06/16/Maven中scope标签作用/","text":"Maven中scope标签作用scope 是用来限制 dependency 的作用范围的，影响 maven 项目在各个生命周期时导入的 package 的状态，主要管理依赖的部署。 scope 的作用范围：（1）compile：默认值，适用于所有阶段（表明该 jar 包在编译、运行以及测试中路径均可见），并且会随着项目一起发布。 （2）test：只在测试时使用，用于编译和运行测试代码，不会随项目发布。 （3）runtime：无需参与项目的编译，不过后期的测试和运行周期需要其参与，与 compile 相比，跳过了编译。如 JDBC 驱动，适用运行和测试阶段。 （4）provided：编译和测试时有效，但是该依赖在运行时由服务器提供，并且打包时也不会被包含进去。如 servlet-api。 （5）system：类似 provided，需要显式提供包含依赖的jar，不会从 maven 仓库下载，而是从本地文件系统获取，需要添加 systemPath 的属性来定义路径。","tags":[]},{"title":"java","date":"2020-06-15T08:34:57.000Z","path":"2020/06/15/java/","text":"","tags":[]}]