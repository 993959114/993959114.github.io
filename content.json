[{"title":"git使用","date":"2020-06-16T08:55:30.409Z","path":"2020/06/16/git使用/","text":"git 基本操作1、创建一个项目 2、打开项目 在项目目录下右键单击–打开 git bash 3、初始化项目仓库 创建项目仓库 命令 ： git init git config –global user.name &lt;名字&gt; ———&gt;:配置用户名 git config –global user.email &lt;邮箱&gt;———&gt;：配置邮箱 git config –list ———&gt;：查看配置信息 git config –global user.name ———&gt;：查看用户名 git config –global user.email ——–&gt; :查看邮箱 git status 查看文件是否被git管理 4、添加文件 git add 文件名 一次只能添加一个文件 全部添加 ： 1git add ./--all/-A/* 5、提交 git commit -m”日志描述” 6、项目文件内容如果有变动 先 git add . 再 git commit -m”日志” 7、git log 查看项目日志 8、回退操作 git reset –hard 前六位编码 9、恢复手动删除的文件 git checkout 提交生成码 文件名 分支操作 ：1、查看分支 git branch 2、创建分支 git branch 分支名 3、切换分支 git checkout 分支名 4、删除分支 git branch -d 分支名 5、合并分支 git merge 分支名 多人协作开发(接下来用张三、李四、CTO三人来演示工作中的流程)： 1、张三克隆文件：git clone &lt;地址&gt; 文件夹名称 2、李四克隆文件：git clone &lt;地址&gt; 文件夹名称 3、张三在开发过程中需要解决BUG 4、李四在开发过程中需要开发新的功能 张三解决BUG并提交文件：1、创建子分支：git branch zhangsan 2、切换子分支：git checkout zhangsan 3、提交到暂存区：git add index.html 4、提交到版本库：git commit -m “张三提交” 5、关联远程分支：git push –set-upstream origin zhangsan (这一步只需第一次的时候这样做即可，第二次修改文件的时候就可以直接执行第6步) 6、提交文件：git push CTO合并文件：1、更新本地的分支：git fetch –all 2、切换子分支：git checkout zhangsan 3、切换主分支：git checkout master 4、合并文件：git merge zhangsan (：wq 按下回车) 5、提交到远端：git push 6、删除子分支：git checkout -d zhangsan (不需要操作 ) 李四开发新的功能，但是李四的文件还是以前有bug的文件，因此我们需要最新的代码：1、创建并切换子分支：git checkout -b lisi fle 2、将开发好的新功能提交到版本库：git add index.html git commit -m “李四提交” 3、切换主分支：git checkout master 4、将远端最新的代码拉取下来：git pull 5、切换子分支：git checkout lisi 6、合并主分支文件：git merge master 7、退出文件：esc 输入wq 8、提交到远端：git push –set-upstream origin lisi","tags":[]},{"title":"Maven中scope标签作用","date":"2020-06-16T08:41:12.055Z","path":"2020/06/16/Maven中scope标签作用/","text":"Maven中scope标签作用scope 是用来限制 dependency 的作用范围的，影响 maven 项目在各个生命周期时导入的 package 的状态，主要管理依赖的部署。 scope 的作用范围：（1）compile：默认值，适用于所有阶段（表明该 jar 包在编译、运行以及测试中路径均可见），并且会随着项目一起发布。 （2）test：只在测试时使用，用于编译和运行测试代码，不会随项目发布。 （3）runtime：无需参与项目的编译，不过后期的测试和运行周期需要其参与，与 compile 相比，跳过了编译。如 JDBC 驱动，适用运行和测试阶段。 （4）provided：编译和测试时有效，但是该依赖在运行时由服务器提供，并且打包时也不会被包含进去。如 servlet-api。 （5）system：类似 provided，需要显式提供包含依赖的jar，不会从 maven 仓库下载，而是从本地文件系统获取，需要添加 systemPath 的属性来定义路径。","tags":[]},{"title":"java","date":"2020-06-15T08:34:57.000Z","path":"2020/06/15/java/","text":"","tags":[]}]